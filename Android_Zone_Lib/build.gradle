apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
// JitPack Maven
apply plugin: 'com.github.dcendents.android-maven'
// Your Group
group = 'com.github.luhaoaimama1'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'

    api 'androidx.appcompat:appcompat:1.0.0'
    api 'org.jetbrains:annotations-java5:16.0.3'
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.11"

    api 'me.imid.swipebacklayout.lib:library:1.1.0'
    api 'com.google.code.gson:gson:2.8.5'

    compileOnly "io.reactivex:rxjava:1.2.5"
    compileOnly "io.reactivex:rxandroid:1.2.1"

    api "org.permissionsdispatcher:permissionsdispatcher:4.6.0"
    kapt "org.permissionsdispatcher:permissionsdispatcher-processor:4.6.0"
}

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 14
        versionCode 1
        versionName "1.0"
    }
    // Specifies the ABI configurations of your native
    // libraries Gradle should build and package with your APK.
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']

            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        androidTest.setRoot('androidTest')
        test.setRoot('test')

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}


apply plugin: 'org.jetbrains.dokka-android'

//kotlin  生成文档
task generateSourcesJar(type: Jar) {
    group = 'jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    options.encoding = "UTF-8"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = javadoc.destinationDir
}


task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
    group = 'jar'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives generateJavadoc
    archives generateSourcesJar
}
//---------------jitPack 文档注释 Start------------------------
//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.sourceFiles
//}
//
//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//task classesJar(type: Jar) {
//    from "$buildDir/intermediates/classes/release"
//}
//
//artifacts {
////注意5.1以后不要使用 下面的classjar 不然引用的时候是jar而不是aar
////    archives classesJar
//    archives javadocJar
//    archives sourcesJar
//}
//
//tasks.withType(Javadoc) {
//    options.addStringOption('Xdoclint:none', '-quiet')
//    options.addStringOption('encoding', 'UTF-8')
//    options.addStringOption('charSet', 'UTF-8')
//}
//---------------jitPack 文档注释Over------------------------
